// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fb.protocol._internal.request.raw
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Transfer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Transfer GetRootAsTransfer(ByteBuffer _bb) { return GetRootAsTransfer(_bb, new Transfer()); }
  public static Transfer GetRootAsTransfer(ByteBuffer _bb, Transfer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyTransfer(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, TransferVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Transfer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public fb.protocol._internal.raw.Service Service { get { int o = __p.__offset(4); return o != 0 ? (fb.protocol._internal.raw.Service)__p.bb.GetSbyte(o + __p.bb_pos) : fb.protocol._internal.raw.Service.Gateway; } }
  public byte Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<fb.protocol._internal.request.raw.Transfer> CreateTransfer(FlatBufferBuilder builder,
      fb.protocol._internal.raw.Service service = fb.protocol._internal.raw.Service.Gateway,
      byte id = 0) {
    builder.StartTable(2);
    Transfer.AddId(builder, id);
    Transfer.AddService(builder, service);
    return Transfer.EndTransfer(builder);
  }

  public static void StartTransfer(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddService(FlatBufferBuilder builder, fb.protocol._internal.raw.Service service) { builder.AddSbyte(0, (sbyte)service, 0); }
  public static void AddId(FlatBufferBuilder builder, byte id) { builder.AddByte(1, id, 0); }
  public static Offset<fb.protocol._internal.request.raw.Transfer> EndTransfer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.protocol._internal.request.raw.Transfer>(o);
  }
  public static void FinishTransferBuffer(FlatBufferBuilder builder, Offset<fb.protocol._internal.request.raw.Transfer> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTransferBuffer(FlatBufferBuilder builder, Offset<fb.protocol._internal.request.raw.Transfer> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class TransferVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Service*/, 1 /*fb.protocol._internal.raw.Service*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 1 /*byte*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
