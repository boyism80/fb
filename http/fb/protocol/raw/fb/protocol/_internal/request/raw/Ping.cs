// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fb.protocol._internal.request.raw
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Ping : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Ping GetRootAsPing(ByteBuffer _bb) { return GetRootAsPing(_bb, new Ping()); }
  public static Ping GetRootAsPing(ByteBuffer _bb, Ping obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyPing(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, PingVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Ping __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public fb.protocol._internal.raw.Service Service { get { int o = __p.__offset(8); return o != 0 ? (fb.protocol._internal.raw.Service)__p.bb.GetSbyte(o + __p.bb_pos) : fb.protocol._internal.raw.Service.Gateway; } }
  public string Ip { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIpBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIpBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIpArray() { return __p.__vector_as_array<byte>(10); }
  public ushort Port { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<fb.protocol._internal.request.raw.Ping> CreatePing(FlatBufferBuilder builder,
      byte id = 0,
      StringOffset nameOffset = default(StringOffset),
      fb.protocol._internal.raw.Service service = fb.protocol._internal.raw.Service.Gateway,
      StringOffset ipOffset = default(StringOffset),
      ushort port = 0) {
    builder.StartTable(5);
    Ping.AddIp(builder, ipOffset);
    Ping.AddName(builder, nameOffset);
    Ping.AddPort(builder, port);
    Ping.AddService(builder, service);
    Ping.AddId(builder, id);
    return Ping.EndPing(builder);
  }

  public static void StartPing(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, byte id) { builder.AddByte(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddService(FlatBufferBuilder builder, fb.protocol._internal.raw.Service service) { builder.AddSbyte(2, (sbyte)service, 0); }
  public static void AddIp(FlatBufferBuilder builder, StringOffset ipOffset) { builder.AddOffset(3, ipOffset.Value, 0); }
  public static void AddPort(FlatBufferBuilder builder, ushort port) { builder.AddUshort(4, port, 0); }
  public static Offset<fb.protocol._internal.request.raw.Ping> EndPing(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.protocol._internal.request.raw.Ping>(o);
  }
  public static void FinishPingBuffer(FlatBufferBuilder builder, Offset<fb.protocol._internal.request.raw.Ping> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPingBuffer(FlatBufferBuilder builder, Offset<fb.protocol._internal.request.raw.Ping> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class PingVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 1 /*byte*/, 1, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Service*/, 1 /*fb.protocol._internal.raw.Service*/, 1, false)
      && verifier.VerifyString(tablePos, 10 /*Ip*/, false)
      && verifier.VerifyField(tablePos, 12 /*Port*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
