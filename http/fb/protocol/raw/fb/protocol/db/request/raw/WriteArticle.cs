// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fb.protocol.db.request.raw
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WriteArticle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static WriteArticle GetRootAsWriteArticle(ByteBuffer _bb) { return GetRootAsWriteArticle(_bb, new WriteArticle()); }
  public static WriteArticle GetRootAsWriteArticle(ByteBuffer _bb, WriteArticle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyWriteArticle(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, WriteArticleVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WriteArticle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Section { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint User { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public string Contents { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentsBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetContentsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetContentsArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<fb.protocol.db.request.raw.WriteArticle> CreateWriteArticle(FlatBufferBuilder builder,
      uint section = 0,
      uint user = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset contentsOffset = default(StringOffset)) {
    builder.StartTable(4);
    WriteArticle.AddContents(builder, contentsOffset);
    WriteArticle.AddTitle(builder, titleOffset);
    WriteArticle.AddUser(builder, user);
    WriteArticle.AddSection(builder, section);
    return WriteArticle.EndWriteArticle(builder);
  }

  public static void StartWriteArticle(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddSection(FlatBufferBuilder builder, uint section) { builder.AddUint(0, section, 0); }
  public static void AddUser(FlatBufferBuilder builder, uint user) { builder.AddUint(1, user, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddContents(FlatBufferBuilder builder, StringOffset contentsOffset) { builder.AddOffset(3, contentsOffset.Value, 0); }
  public static Offset<fb.protocol.db.request.raw.WriteArticle> EndWriteArticle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.protocol.db.request.raw.WriteArticle>(o);
  }
  public static void FinishWriteArticleBuffer(FlatBufferBuilder builder, Offset<fb.protocol.db.request.raw.WriteArticle> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedWriteArticleBuffer(FlatBufferBuilder builder, Offset<fb.protocol.db.request.raw.WriteArticle> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class WriteArticleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Section*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*User*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyString(tablePos, 10 /*Contents*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
