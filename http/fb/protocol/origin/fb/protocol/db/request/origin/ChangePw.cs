// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fb.protocol.db.request.origin
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ChangePw : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ChangePw GetRootAsChangePw(ByteBuffer _bb) { return GetRootAsChangePw(_bb, new ChangePw()); }
  public static ChangePw GetRootAsChangePw(ByteBuffer _bb, ChangePw obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyChangePw(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, ChangePwVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChangePw __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Uid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Before { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBeforeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBeforeArray() { return __p.__vector_as_array<byte>(6); }
  public string After { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAfterBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAfterBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAfterArray() { return __p.__vector_as_array<byte>(8); }
  public uint Birthday { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<fb.protocol.db.request.origin.ChangePw> CreateChangePw(FlatBufferBuilder builder,
      uint uid = 0,
      StringOffset beforeOffset = default(StringOffset),
      StringOffset afterOffset = default(StringOffset),
      uint birthday = 0) {
    builder.StartTable(4);
    ChangePw.AddBirthday(builder, birthday);
    ChangePw.AddAfter(builder, afterOffset);
    ChangePw.AddBefore(builder, beforeOffset);
    ChangePw.AddUid(builder, uid);
    return ChangePw.EndChangePw(builder);
  }

  public static void StartChangePw(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddUid(FlatBufferBuilder builder, uint uid) { builder.AddUint(0, uid, 0); }
  public static void AddBefore(FlatBufferBuilder builder, StringOffset beforeOffset) { builder.AddOffset(1, beforeOffset.Value, 0); }
  public static void AddAfter(FlatBufferBuilder builder, StringOffset afterOffset) { builder.AddOffset(2, afterOffset.Value, 0); }
  public static void AddBirthday(FlatBufferBuilder builder, uint birthday) { builder.AddUint(3, birthday, 0); }
  public static Offset<fb.protocol.db.request.origin.ChangePw> EndChangePw(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.protocol.db.request.origin.ChangePw>(o);
  }
  public static void FinishChangePwBuffer(FlatBufferBuilder builder, Offset<fb.protocol.db.request.origin.ChangePw> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedChangePwBuffer(FlatBufferBuilder builder, Offset<fb.protocol.db.request.origin.ChangePw> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class ChangePwVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Uid*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Before*/, false)
      && verifier.VerifyString(tablePos, 8 /*After*/, false)
      && verifier.VerifyField(tablePos, 10 /*Birthday*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
