// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DBREQUESTBOARDDELETE_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_
#define FLATBUFFERS_GENERATED_DBREQUESTBOARDDELETE_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace db {
namespace request {
namespace origin {

struct DeleteArticle;
struct DeleteArticleBuilder;

struct DeleteArticle FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DeleteArticleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_USER = 6
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t user() const {
    return GetField<uint32_t>(VT_USER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_USER, 4) &&
           verifier.EndTable();
  }
};

struct DeleteArticleBuilder {
  typedef DeleteArticle Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(DeleteArticle::VT_ID, id, 0);
  }
  void add_user(uint32_t user) {
    fbb_.AddElement<uint32_t>(DeleteArticle::VT_USER, user, 0);
  }
  explicit DeleteArticleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DeleteArticle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DeleteArticle>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DeleteArticle> CreateDeleteArticle(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    uint32_t user = 0) {
  DeleteArticleBuilder builder_(_fbb);
  builder_.add_user(user);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const fb::protocol::db::request::origin::DeleteArticle *GetDeleteArticle(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::request::origin::DeleteArticle>(buf);
}

inline const fb::protocol::db::request::origin::DeleteArticle *GetSizePrefixedDeleteArticle(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::request::origin::DeleteArticle>(buf);
}

inline bool VerifyDeleteArticleBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::request::origin::DeleteArticle>(nullptr);
}

inline bool VerifySizePrefixedDeleteArticleBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::request::origin::DeleteArticle>(nullptr);
}

inline void FinishDeleteArticleBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::origin::DeleteArticle> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDeleteArticleBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::origin::DeleteArticle> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace origin
}  // namespace request
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_DBREQUESTBOARDDELETE_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_
