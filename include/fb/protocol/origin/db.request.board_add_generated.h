// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DBREQUESTBOARDADD_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_
#define FLATBUFFERS_GENERATED_DBREQUESTBOARDADD_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace db {
namespace request {
namespace origin {

struct AddBoard;
struct AddBoardBuilder;

struct AddBoard FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddBoardBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SECTION = 4,
    VT_USER = 6,
    VT_TITLE = 8,
    VT_CONTENTS = 10
  };
  uint32_t section() const {
    return GetField<uint32_t>(VT_SECTION, 0);
  }
  uint32_t user() const {
    return GetField<uint32_t>(VT_USER, 0);
  }
  const ::flatbuffers::String *title() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TITLE);
  }
  const ::flatbuffers::String *contents() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONTENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SECTION, 4) &&
           VerifyField<uint32_t>(verifier, VT_USER, 4) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_CONTENTS) &&
           verifier.VerifyString(contents()) &&
           verifier.EndTable();
  }
};

struct AddBoardBuilder {
  typedef AddBoard Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_section(uint32_t section) {
    fbb_.AddElement<uint32_t>(AddBoard::VT_SECTION, section, 0);
  }
  void add_user(uint32_t user) {
    fbb_.AddElement<uint32_t>(AddBoard::VT_USER, user, 0);
  }
  void add_title(::flatbuffers::Offset<::flatbuffers::String> title) {
    fbb_.AddOffset(AddBoard::VT_TITLE, title);
  }
  void add_contents(::flatbuffers::Offset<::flatbuffers::String> contents) {
    fbb_.AddOffset(AddBoard::VT_CONTENTS, contents);
  }
  explicit AddBoardBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AddBoard> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AddBoard>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AddBoard> CreateAddBoard(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t section = 0,
    uint32_t user = 0,
    ::flatbuffers::Offset<::flatbuffers::String> title = 0,
    ::flatbuffers::Offset<::flatbuffers::String> contents = 0) {
  AddBoardBuilder builder_(_fbb);
  builder_.add_contents(contents);
  builder_.add_title(title);
  builder_.add_user(user);
  builder_.add_section(section);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AddBoard> CreateAddBoardDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t section = 0,
    uint32_t user = 0,
    const char *title = nullptr,
    const char *contents = nullptr) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto contents__ = contents ? _fbb.CreateString(contents) : 0;
  return fb::protocol::db::request::origin::CreateAddBoard(
      _fbb,
      section,
      user,
      title__,
      contents__);
}

inline const fb::protocol::db::request::origin::AddBoard *GetAddBoard(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::request::origin::AddBoard>(buf);
}

inline const fb::protocol::db::request::origin::AddBoard *GetSizePrefixedAddBoard(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::request::origin::AddBoard>(buf);
}

inline bool VerifyAddBoardBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::request::origin::AddBoard>(nullptr);
}

inline bool VerifySizePrefixedAddBoardBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::request::origin::AddBoard>(nullptr);
}

inline void FinishAddBoardBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::origin::AddBoard> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAddBoardBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::origin::AddBoard> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace origin
}  // namespace request
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_DBREQUESTBOARDADD_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_
