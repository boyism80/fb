// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DBRESPONSEBOARDGETLIST_FB_PROTOCOL_DB_RESPONSE_ORIGIN_H_
#define FLATBUFFERS_GENERATED_DBRESPONSEBOARDGETLIST_FB_PROTOCOL_DB_RESPONSE_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "db_generated.h"

namespace fb {
namespace protocol {
namespace db {
namespace response {
namespace origin {

struct GetArticleList;
struct GetArticleListBuilder;

struct GetArticleList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetArticleListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUMMARY_LIST = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::origin::ArticleSummary>> *summary_list() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::origin::ArticleSummary>> *>(VT_SUMMARY_LIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SUMMARY_LIST) &&
           verifier.VerifyVector(summary_list()) &&
           verifier.VerifyVectorOfTables(summary_list()) &&
           verifier.EndTable();
  }
};

struct GetArticleListBuilder {
  typedef GetArticleList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_summary_list(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::origin::ArticleSummary>>> summary_list) {
    fbb_.AddOffset(GetArticleList::VT_SUMMARY_LIST, summary_list);
  }
  explicit GetArticleListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetArticleList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetArticleList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GetArticleList> CreateGetArticleList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::origin::ArticleSummary>>> summary_list = 0) {
  GetArticleListBuilder builder_(_fbb);
  builder_.add_summary_list(summary_list);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GetArticleList> CreateGetArticleListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::protocol::db::origin::ArticleSummary>> *summary_list = nullptr) {
  auto summary_list__ = summary_list ? _fbb.CreateVector<::flatbuffers::Offset<fb::protocol::db::origin::ArticleSummary>>(*summary_list) : 0;
  return fb::protocol::db::response::origin::CreateGetArticleList(
      _fbb,
      summary_list__);
}

inline const fb::protocol::db::response::origin::GetArticleList *GetGetArticleList(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::response::origin::GetArticleList>(buf);
}

inline const fb::protocol::db::response::origin::GetArticleList *GetSizePrefixedGetArticleList(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::response::origin::GetArticleList>(buf);
}

inline bool VerifyGetArticleListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::response::origin::GetArticleList>(nullptr);
}

inline bool VerifySizePrefixedGetArticleListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::response::origin::GetArticleList>(nullptr);
}

inline void FinishGetArticleListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::response::origin::GetArticleList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGetArticleListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::response::origin::GetArticleList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace origin
}  // namespace response
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_DBRESPONSEBOARDGETLIST_FB_PROTOCOL_DB_RESPONSE_ORIGIN_H_
