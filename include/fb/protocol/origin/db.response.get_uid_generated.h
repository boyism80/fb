// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DBRESPONSEGETUID_FB_PROTOCOL_DB_RESPONSE_ORIGIN_H_
#define FLATBUFFERS_GENERATED_DBRESPONSEGETUID_FB_PROTOCOL_DB_RESPONSE_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace db {
namespace response {
namespace origin {

struct GetUid;
struct GetUidBuilder;

struct GetUid FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetUidBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_SUCCESS = 6
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID, 4) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct GetUidBuilder {
  typedef GetUid Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(GetUid::VT_UID, uid, 0);
  }
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(GetUid::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit GetUidBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetUid> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetUid>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GetUid> CreateGetUid(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    bool success = false) {
  GetUidBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_success(success);
  return builder_.Finish();
}

inline const fb::protocol::db::response::origin::GetUid *GetGetUid(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::response::origin::GetUid>(buf);
}

inline const fb::protocol::db::response::origin::GetUid *GetSizePrefixedGetUid(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::response::origin::GetUid>(buf);
}

inline bool VerifyGetUidBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::response::origin::GetUid>(nullptr);
}

inline bool VerifySizePrefixedGetUidBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::response::origin::GetUid>(nullptr);
}

inline void FinishGetUidBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::response::origin::GetUid> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGetUidBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::response::origin::GetUid> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace origin
}  // namespace response
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_DBRESPONSEGETUID_FB_PROTOCOL_DB_RESPONSE_ORIGIN_H_
