// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DBREQUESTMKCH_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_
#define FLATBUFFERS_GENERATED_DBREQUESTMKCH_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace db {
namespace request {
namespace origin {

struct MakeCharacter;
struct MakeCharacterBuilder;

struct MakeCharacter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MakeCharacterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_HAIR = 6,
    VT_SEX = 8,
    VT_NATION = 10,
    VT_CREATURE = 12
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint16_t hair() const {
    return GetField<uint16_t>(VT_HAIR, 0);
  }
  uint8_t sex() const {
    return GetField<uint8_t>(VT_SEX, 0);
  }
  uint8_t nation() const {
    return GetField<uint8_t>(VT_NATION, 0);
  }
  uint8_t creature() const {
    return GetField<uint8_t>(VT_CREATURE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID, 4) &&
           VerifyField<uint16_t>(verifier, VT_HAIR, 2) &&
           VerifyField<uint8_t>(verifier, VT_SEX, 1) &&
           VerifyField<uint8_t>(verifier, VT_NATION, 1) &&
           VerifyField<uint8_t>(verifier, VT_CREATURE, 1) &&
           verifier.EndTable();
  }
};

struct MakeCharacterBuilder {
  typedef MakeCharacter Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(MakeCharacter::VT_UID, uid, 0);
  }
  void add_hair(uint16_t hair) {
    fbb_.AddElement<uint16_t>(MakeCharacter::VT_HAIR, hair, 0);
  }
  void add_sex(uint8_t sex) {
    fbb_.AddElement<uint8_t>(MakeCharacter::VT_SEX, sex, 0);
  }
  void add_nation(uint8_t nation) {
    fbb_.AddElement<uint8_t>(MakeCharacter::VT_NATION, nation, 0);
  }
  void add_creature(uint8_t creature) {
    fbb_.AddElement<uint8_t>(MakeCharacter::VT_CREATURE, creature, 0);
  }
  explicit MakeCharacterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MakeCharacter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MakeCharacter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MakeCharacter> CreateMakeCharacter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    uint16_t hair = 0,
    uint8_t sex = 0,
    uint8_t nation = 0,
    uint8_t creature = 0) {
  MakeCharacterBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_hair(hair);
  builder_.add_creature(creature);
  builder_.add_nation(nation);
  builder_.add_sex(sex);
  return builder_.Finish();
}

inline const fb::protocol::db::request::origin::MakeCharacter *GetMakeCharacter(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::request::origin::MakeCharacter>(buf);
}

inline const fb::protocol::db::request::origin::MakeCharacter *GetSizePrefixedMakeCharacter(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::request::origin::MakeCharacter>(buf);
}

inline bool VerifyMakeCharacterBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::request::origin::MakeCharacter>(nullptr);
}

inline bool VerifySizePrefixedMakeCharacterBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::request::origin::MakeCharacter>(nullptr);
}

inline void FinishMakeCharacterBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::origin::MakeCharacter> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMakeCharacterBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::origin::MakeCharacter> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace origin
}  // namespace request
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_DBREQUESTMKCH_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_
