// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DBREQUESTBOARDLIST_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_
#define FLATBUFFERS_GENERATED_DBREQUESTBOARDLIST_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace db {
namespace request {
namespace origin {

struct BoardList;
struct BoardListBuilder;

struct BoardList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoardListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SECTION = 4,
    VT_POSITION = 6
  };
  uint32_t section() const {
    return GetField<uint32_t>(VT_SECTION, 0);
  }
  uint32_t position() const {
    return GetField<uint32_t>(VT_POSITION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SECTION, 4) &&
           VerifyField<uint32_t>(verifier, VT_POSITION, 4) &&
           verifier.EndTable();
  }
};

struct BoardListBuilder {
  typedef BoardList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_section(uint32_t section) {
    fbb_.AddElement<uint32_t>(BoardList::VT_SECTION, section, 0);
  }
  void add_position(uint32_t position) {
    fbb_.AddElement<uint32_t>(BoardList::VT_POSITION, position, 0);
  }
  explicit BoardListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BoardList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BoardList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BoardList> CreateBoardList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t section = 0,
    uint32_t position = 0) {
  BoardListBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_section(section);
  return builder_.Finish();
}

inline const fb::protocol::db::request::origin::BoardList *GetBoardList(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::request::origin::BoardList>(buf);
}

inline const fb::protocol::db::request::origin::BoardList *GetSizePrefixedBoardList(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::request::origin::BoardList>(buf);
}

inline bool VerifyBoardListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::request::origin::BoardList>(nullptr);
}

inline bool VerifySizePrefixedBoardListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::request::origin::BoardList>(nullptr);
}

inline void FinishBoardListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::origin::BoardList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBoardListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::origin::BoardList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace origin
}  // namespace request
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_DBREQUESTBOARDLIST_FB_PROTOCOL_DB_REQUEST_ORIGIN_H_
