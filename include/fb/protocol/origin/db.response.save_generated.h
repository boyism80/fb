// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DBRESPONSESAVE_FB_PROTOCOL_DB_RESPONSE_ORIGIN_H_
#define FLATBUFFERS_GENERATED_DBRESPONSESAVE_FB_PROTOCOL_DB_RESPONSE_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace db {
namespace response {
namespace origin {

struct Save;
struct SaveBuilder;

struct Save FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SaveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct SaveBuilder {
  typedef Save Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(Save::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit SaveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Save> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Save>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Save> CreateSave(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false) {
  SaveBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

inline const fb::protocol::db::response::origin::Save *GetSave(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::response::origin::Save>(buf);
}

inline const fb::protocol::db::response::origin::Save *GetSizePrefixedSave(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::response::origin::Save>(buf);
}

inline bool VerifySaveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::response::origin::Save>(nullptr);
}

inline bool VerifySizePrefixedSaveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::response::origin::Save>(nullptr);
}

inline void FinishSaveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::response::origin::Save> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSaveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::response::origin::Save> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace origin
}  // namespace response
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_DBRESPONSESAVE_FB_PROTOCOL_DB_RESPONSE_ORIGIN_H_
