// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTERNALREQUESTWHISPER_FB_PROTOCOL_INTERNAL_REQUEST_ORIGIN_H_
#define FLATBUFFERS_GENERATED_INTERNALREQUESTWHISPER_FB_PROTOCOL_INTERNAL_REQUEST_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace internal {
namespace request {
namespace origin {

struct Whisper;
struct WhisperBuilder;

struct Whisper FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WhisperBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FROM = 4,
    VT_TO = 6,
    VT_MESSAGE = 8
  };
  const ::flatbuffers::String *from() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FROM);
  }
  const ::flatbuffers::String *to() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TO);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FROM) &&
           verifier.VerifyString(from()) &&
           VerifyOffset(verifier, VT_TO) &&
           verifier.VerifyString(to()) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct WhisperBuilder {
  typedef Whisper Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_from(::flatbuffers::Offset<::flatbuffers::String> from) {
    fbb_.AddOffset(Whisper::VT_FROM, from);
  }
  void add_to(::flatbuffers::Offset<::flatbuffers::String> to) {
    fbb_.AddOffset(Whisper::VT_TO, to);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(Whisper::VT_MESSAGE, message);
  }
  explicit WhisperBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Whisper> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Whisper>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Whisper> CreateWhisper(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> from = 0,
    ::flatbuffers::Offset<::flatbuffers::String> to = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  WhisperBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_to(to);
  builder_.add_from(from);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Whisper> CreateWhisperDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *from = nullptr,
    const char *to = nullptr,
    const char *message = nullptr) {
  auto from__ = from ? _fbb.CreateString(from) : 0;
  auto to__ = to ? _fbb.CreateString(to) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return fb::protocol::internal::request::origin::CreateWhisper(
      _fbb,
      from__,
      to__,
      message__);
}

inline const fb::protocol::internal::request::origin::Whisper *GetWhisper(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::internal::request::origin::Whisper>(buf);
}

inline const fb::protocol::internal::request::origin::Whisper *GetSizePrefixedWhisper(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::internal::request::origin::Whisper>(buf);
}

inline bool VerifyWhisperBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::internal::request::origin::Whisper>(nullptr);
}

inline bool VerifySizePrefixedWhisperBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::internal::request::origin::Whisper>(nullptr);
}

inline void FinishWhisperBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::internal::request::origin::Whisper> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWhisperBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::internal::request::origin::Whisper> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace origin
}  // namespace request
}  // namespace internal
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_INTERNALREQUESTWHISPER_FB_PROTOCOL_INTERNAL_REQUEST_ORIGIN_H_
