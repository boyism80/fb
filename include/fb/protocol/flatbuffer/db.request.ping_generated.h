// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DBREQUESTPING_FB_PROTOCOL_FLATBUFFER_DB_REQUEST_H_
#define FLATBUFFERS_GENERATED_DBREQUESTPING_FB_PROTOCOL_FLATBUFFER_DB_REQUEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace flatbuffer {
namespace db {
namespace request {

struct Ping;
struct PingBuilder;

struct Ping FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PingBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PingBuilder {
  typedef Ping Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit PingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Ping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Ping>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Ping> CreatePing(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  PingBuilder builder_(_fbb);
  return builder_.Finish();
}

inline const fb::protocol::flatbuffer::db::request::Ping *GetPing(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::flatbuffer::db::request::Ping>(buf);
}

inline const fb::protocol::flatbuffer::db::request::Ping *GetSizePrefixedPing(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::flatbuffer::db::request::Ping>(buf);
}

inline bool VerifyPingBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::flatbuffer::db::request::Ping>(nullptr);
}

inline bool VerifySizePrefixedPingBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::flatbuffer::db::request::Ping>(nullptr);
}

inline void FinishPingBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::flatbuffer::db::request::Ping> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPingBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::flatbuffer::db::request::Ping> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace request
}  // namespace db
}  // namespace flatbuffer
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_DBREQUESTPING_FB_PROTOCOL_FLATBUFFER_DB_REQUEST_H_
