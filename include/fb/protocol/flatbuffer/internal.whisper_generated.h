// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTERNALWHISPER_FB_GAME_FLATBUFFER_INTER_H_
#define FLATBUFFERS_GENERATED_INTERNALWHISPER_FB_GAME_FLATBUFFER_INTER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace game {
namespace flatbuffer {
namespace inter {

struct Whisper;
struct WhisperBuilder;

struct Whisper FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WhisperBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MESSAGE = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct WhisperBuilder {
  typedef Whisper Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Whisper::VT_NAME, name);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(Whisper::VT_MESSAGE, message);
  }
  explicit WhisperBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Whisper> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Whisper>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Whisper> CreateWhisper(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  WhisperBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Whisper> CreateWhisperDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *message = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return fb::game::flatbuffer::inter::CreateWhisper(
      _fbb,
      name__,
      message__);
}

inline const fb::game::flatbuffer::inter::Whisper *GetWhisper(const void *buf) {
  return ::flatbuffers::GetRoot<fb::game::flatbuffer::inter::Whisper>(buf);
}

inline const fb::game::flatbuffer::inter::Whisper *GetSizePrefixedWhisper(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::game::flatbuffer::inter::Whisper>(buf);
}

inline bool VerifyWhisperBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::game::flatbuffer::inter::Whisper>(nullptr);
}

inline bool VerifySizePrefixedWhisperBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::game::flatbuffer::inter::Whisper>(nullptr);
}

inline void FinishWhisperBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::game::flatbuffer::inter::Whisper> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWhisperBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::game::flatbuffer::inter::Whisper> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace inter
}  // namespace flatbuffer
}  // namespace game
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_INTERNALWHISPER_FB_GAME_FLATBUFFER_INTER_H_
