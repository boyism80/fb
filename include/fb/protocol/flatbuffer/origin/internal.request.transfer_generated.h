// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTERNALREQUESTTRANSFER_FB_PROTOCOL_INTERNAL_REQUEST_ORIGIN_H_
#define FLATBUFFERS_GENERATED_INTERNALREQUESTTRANSFER_FB_PROTOCOL_INTERNAL_REQUEST_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace internal {
namespace request {
namespace origin {

struct Transfer;
struct TransferBuilder;

enum Service : int8_t {
  Service_Gateway = 0,
  Service_Login = 1,
  Service_Game = 2,
  Service_MIN = Service_Gateway,
  Service_MAX = Service_Game
};

inline const Service (&EnumValuesService())[3] {
  static const Service values[] = {
    Service_Gateway,
    Service_Login,
    Service_Game
  };
  return values;
}

inline const char * const *EnumNamesService() {
  static const char * const names[4] = {
    "Gateway",
    "Login",
    "Game",
    nullptr
  };
  return names;
}

inline const char *EnumNameService(Service e) {
  if (::flatbuffers::IsOutRange(e, Service_Gateway, Service_Game)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesService()[index];
}

struct Transfer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransferBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_FROM = 6,
    VT_TO = 8,
    VT_MAP = 10,
    VT_X = 12,
    VT_Y = 14,
    VT_FD = 16
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  fb::protocol::internal::request::origin::Service from() const {
    return static_cast<fb::protocol::internal::request::origin::Service>(GetField<int8_t>(VT_FROM, 0));
  }
  fb::protocol::internal::request::origin::Service to() const {
    return static_cast<fb::protocol::internal::request::origin::Service>(GetField<int8_t>(VT_TO, 0));
  }
  uint16_t map() const {
    return GetField<uint16_t>(VT_MAP, 0);
  }
  uint16_t x() const {
    return GetField<uint16_t>(VT_X, 0);
  }
  uint16_t y() const {
    return GetField<uint16_t>(VT_Y, 0);
  }
  uint32_t fd() const {
    return GetField<uint32_t>(VT_FD, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_FROM, 1) &&
           VerifyField<int8_t>(verifier, VT_TO, 1) &&
           VerifyField<uint16_t>(verifier, VT_MAP, 2) &&
           VerifyField<uint16_t>(verifier, VT_X, 2) &&
           VerifyField<uint16_t>(verifier, VT_Y, 2) &&
           VerifyField<uint32_t>(verifier, VT_FD, 4) &&
           verifier.EndTable();
  }
};

struct TransferBuilder {
  typedef Transfer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Transfer::VT_NAME, name);
  }
  void add_from(fb::protocol::internal::request::origin::Service from) {
    fbb_.AddElement<int8_t>(Transfer::VT_FROM, static_cast<int8_t>(from), 0);
  }
  void add_to(fb::protocol::internal::request::origin::Service to) {
    fbb_.AddElement<int8_t>(Transfer::VT_TO, static_cast<int8_t>(to), 0);
  }
  void add_map(uint16_t map) {
    fbb_.AddElement<uint16_t>(Transfer::VT_MAP, map, 0);
  }
  void add_x(uint16_t x) {
    fbb_.AddElement<uint16_t>(Transfer::VT_X, x, 0);
  }
  void add_y(uint16_t y) {
    fbb_.AddElement<uint16_t>(Transfer::VT_Y, y, 0);
  }
  void add_fd(uint32_t fd) {
    fbb_.AddElement<uint32_t>(Transfer::VT_FD, fd, 0);
  }
  explicit TransferBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Transfer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Transfer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Transfer> CreateTransfer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    fb::protocol::internal::request::origin::Service from = fb::protocol::internal::request::origin::Service_Gateway,
    fb::protocol::internal::request::origin::Service to = fb::protocol::internal::request::origin::Service_Gateway,
    uint16_t map = 0,
    uint16_t x = 0,
    uint16_t y = 0,
    uint32_t fd = 0) {
  TransferBuilder builder_(_fbb);
  builder_.add_fd(fd);
  builder_.add_name(name);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_map(map);
  builder_.add_to(to);
  builder_.add_from(from);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Transfer> CreateTransferDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    fb::protocol::internal::request::origin::Service from = fb::protocol::internal::request::origin::Service_Gateway,
    fb::protocol::internal::request::origin::Service to = fb::protocol::internal::request::origin::Service_Gateway,
    uint16_t map = 0,
    uint16_t x = 0,
    uint16_t y = 0,
    uint32_t fd = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return fb::protocol::internal::request::origin::CreateTransfer(
      _fbb,
      name__,
      from,
      to,
      map,
      x,
      y,
      fd);
}

inline const fb::protocol::internal::request::origin::Transfer *GetTransfer(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::internal::request::origin::Transfer>(buf);
}

inline const fb::protocol::internal::request::origin::Transfer *GetSizePrefixedTransfer(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::internal::request::origin::Transfer>(buf);
}

inline bool VerifyTransferBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::internal::request::origin::Transfer>(nullptr);
}

inline bool VerifySizePrefixedTransferBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::internal::request::origin::Transfer>(nullptr);
}

inline void FinishTransferBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::internal::request::origin::Transfer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTransferBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::internal::request::origin::Transfer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace origin
}  // namespace request
}  // namespace internal
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_INTERNALREQUESTTRANSFER_FB_PROTOCOL_INTERNAL_REQUEST_ORIGIN_H_
