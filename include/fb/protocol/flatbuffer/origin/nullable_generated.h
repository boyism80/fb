// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NULLABLE_FB_PROTOCOL_ORIGIN_H_
#define FLATBUFFERS_GENERATED_NULLABLE_FB_PROTOCOL_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace origin {

struct nullable_uint32;
struct nullable_uint32Builder;

struct nullable_uint16;
struct nullable_uint16Builder;

struct nullable_bool;
struct nullable_boolBuilder;

struct nullable_uint32 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef nullable_uint32Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint32_t value() const {
    return GetField<uint32_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct nullable_uint32Builder {
  typedef nullable_uint32 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint32_t value) {
    fbb_.AddElement<uint32_t>(nullable_uint32::VT_VALUE, value, 0);
  }
  explicit nullable_uint32Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<nullable_uint32> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<nullable_uint32>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<nullable_uint32> Createnullable_uint32(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t value = 0) {
  nullable_uint32Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct nullable_uint16 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef nullable_uint16Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint16_t value() const {
    return GetField<uint16_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VALUE, 2) &&
           verifier.EndTable();
  }
};

struct nullable_uint16Builder {
  typedef nullable_uint16 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint16_t value) {
    fbb_.AddElement<uint16_t>(nullable_uint16::VT_VALUE, value, 0);
  }
  explicit nullable_uint16Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<nullable_uint16> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<nullable_uint16>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<nullable_uint16> Createnullable_uint16(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t value = 0) {
  nullable_uint16Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct nullable_bool FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef nullable_boolBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct nullable_boolBuilder {
  typedef nullable_bool Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(nullable_bool::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit nullable_boolBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<nullable_bool> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<nullable_bool>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<nullable_bool> Createnullable_bool(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool value = false) {
  nullable_boolBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

}  // namespace origin
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_NULLABLE_FB_PROTOCOL_ORIGIN_H_
