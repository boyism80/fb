// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTERNALRESPONSELOGIN_FB_PROTOCOL_INTERNAL_RESPONSE_ORIGIN_H_
#define FLATBUFFERS_GENERATED_INTERNALRESPONSELOGIN_FB_PROTOCOL_INTERNAL_RESPONSE_ORIGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace internal {
namespace response {
namespace origin {

struct Login;
struct LoginBuilder;

struct Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4,
    VT_LOGON = 6,
    VT_IP = 8,
    VT_PORT = 10
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool logon() const {
    return GetField<uint8_t>(VT_LOGON, 0) != 0;
  }
  const ::flatbuffers::String *ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IP);
  }
  uint16_t port() const {
    return GetField<uint16_t>(VT_PORT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           VerifyField<uint8_t>(verifier, VT_LOGON, 1) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyField<uint16_t>(verifier, VT_PORT, 2) &&
           verifier.EndTable();
  }
};

struct LoginBuilder {
  typedef Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(Login::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_logon(bool logon) {
    fbb_.AddElement<uint8_t>(Login::VT_LOGON, static_cast<uint8_t>(logon), 0);
  }
  void add_ip(::flatbuffers::Offset<::flatbuffers::String> ip) {
    fbb_.AddOffset(Login::VT_IP, ip);
  }
  void add_port(uint16_t port) {
    fbb_.AddElement<uint16_t>(Login::VT_PORT, port, 0);
  }
  explicit LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Login> CreateLogin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    bool logon = false,
    ::flatbuffers::Offset<::flatbuffers::String> ip = 0,
    uint16_t port = 0) {
  LoginBuilder builder_(_fbb);
  builder_.add_ip(ip);
  builder_.add_port(port);
  builder_.add_logon(logon);
  builder_.add_success(success);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Login> CreateLoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    bool logon = false,
    const char *ip = nullptr,
    uint16_t port = 0) {
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  return fb::protocol::internal::response::origin::CreateLogin(
      _fbb,
      success,
      logon,
      ip__,
      port);
}

inline const fb::protocol::internal::response::origin::Login *GetLogin(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::internal::response::origin::Login>(buf);
}

inline const fb::protocol::internal::response::origin::Login *GetSizePrefixedLogin(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::internal::response::origin::Login>(buf);
}

inline bool VerifyLoginBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::internal::response::origin::Login>(nullptr);
}

inline bool VerifySizePrefixedLoginBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::internal::response::origin::Login>(nullptr);
}

inline void FinishLoginBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::internal::response::origin::Login> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLoginBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::internal::response::origin::Login> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace origin
}  // namespace response
}  // namespace internal
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_INTERNALRESPONSELOGIN_FB_PROTOCOL_INTERNAL_RESPONSE_ORIGIN_H_
