// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPROTOCOLDBREQUESTSAVE_FB_PROTOCOL_DB_REQUEST_RAW_H_
#define FLATBUFFERS_GENERATED_FBPROTOCOLDBREQUESTSAVE_FB_PROTOCOL_DB_REQUEST_RAW_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "fb.protocol.db.character_generated.h"
#include "fb.protocol.db.item_generated.h"
#include "fb.protocol.db.spell_generated.h"

namespace fb {
namespace protocol {
namespace db {
namespace request {
namespace raw {

struct Save;
struct SaveBuilder;

struct Save FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SaveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHARACTER = 4,
    VT_ITEMS = 6,
    VT_SPELLS = 8
  };
  const fb::protocol::db::raw::Character *character() const {
    return GetPointer<const fb::protocol::db::raw::Character *>(VT_CHARACTER);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::raw::Item>> *items() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::raw::Item>> *>(VT_ITEMS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::raw::Spell>> *spells() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::raw::Spell>> *>(VT_SPELLS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHARACTER) &&
           verifier.VerifyTable(character()) &&
           VerifyOffset(verifier, VT_ITEMS) &&
           verifier.VerifyVector(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           VerifyOffset(verifier, VT_SPELLS) &&
           verifier.VerifyVector(spells()) &&
           verifier.VerifyVectorOfTables(spells()) &&
           verifier.EndTable();
  }
};

struct SaveBuilder {
  typedef Save Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_character(::flatbuffers::Offset<fb::protocol::db::raw::Character> character) {
    fbb_.AddOffset(Save::VT_CHARACTER, character);
  }
  void add_items(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::raw::Item>>> items) {
    fbb_.AddOffset(Save::VT_ITEMS, items);
  }
  void add_spells(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::raw::Spell>>> spells) {
    fbb_.AddOffset(Save::VT_SPELLS, spells);
  }
  explicit SaveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Save> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Save>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Save> CreateSave(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fb::protocol::db::raw::Character> character = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::raw::Item>>> items = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::protocol::db::raw::Spell>>> spells = 0) {
  SaveBuilder builder_(_fbb);
  builder_.add_spells(spells);
  builder_.add_items(items);
  builder_.add_character(character);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Save> CreateSaveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fb::protocol::db::raw::Character> character = 0,
    const std::vector<::flatbuffers::Offset<fb::protocol::db::raw::Item>> *items = nullptr,
    const std::vector<::flatbuffers::Offset<fb::protocol::db::raw::Spell>> *spells = nullptr) {
  auto items__ = items ? _fbb.CreateVector<::flatbuffers::Offset<fb::protocol::db::raw::Item>>(*items) : 0;
  auto spells__ = spells ? _fbb.CreateVector<::flatbuffers::Offset<fb::protocol::db::raw::Spell>>(*spells) : 0;
  return fb::protocol::db::request::raw::CreateSave(
      _fbb,
      character,
      items__,
      spells__);
}

inline const fb::protocol::db::request::raw::Save *GetSave(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::request::raw::Save>(buf);
}

inline const fb::protocol::db::request::raw::Save *GetSizePrefixedSave(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::request::raw::Save>(buf);
}

inline bool VerifySaveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::request::raw::Save>(nullptr);
}

inline bool VerifySizePrefixedSaveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::request::raw::Save>(nullptr);
}

inline void FinishSaveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::raw::Save> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSaveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::raw::Save> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace raw
}  // namespace request
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_FBPROTOCOLDBREQUESTSAVE_FB_PROTOCOL_DB_REQUEST_RAW_H_
