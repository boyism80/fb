// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPROTOCOLDBREQUESTCHANGEPW_FB_PROTOCOL_DB_REQUEST_RAW_H_
#define FLATBUFFERS_GENERATED_FBPROTOCOLDBREQUESTCHANGEPW_FB_PROTOCOL_DB_REQUEST_RAW_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace db {
namespace request {
namespace raw {

struct ChangePw;
struct ChangePwBuilder;

struct ChangePw FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChangePwBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_BEFORE = 6,
    VT_AFTER = 8,
    VT_BIRTHDAY = 10
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  const ::flatbuffers::String *before() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BEFORE);
  }
  const ::flatbuffers::String *after() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AFTER);
  }
  uint32_t birthday() const {
    return GetField<uint32_t>(VT_BIRTHDAY, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID, 4) &&
           VerifyOffset(verifier, VT_BEFORE) &&
           verifier.VerifyString(before()) &&
           VerifyOffset(verifier, VT_AFTER) &&
           verifier.VerifyString(after()) &&
           VerifyField<uint32_t>(verifier, VT_BIRTHDAY, 4) &&
           verifier.EndTable();
  }
};

struct ChangePwBuilder {
  typedef ChangePw Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(ChangePw::VT_UID, uid, 0);
  }
  void add_before(::flatbuffers::Offset<::flatbuffers::String> before) {
    fbb_.AddOffset(ChangePw::VT_BEFORE, before);
  }
  void add_after(::flatbuffers::Offset<::flatbuffers::String> after) {
    fbb_.AddOffset(ChangePw::VT_AFTER, after);
  }
  void add_birthday(uint32_t birthday) {
    fbb_.AddElement<uint32_t>(ChangePw::VT_BIRTHDAY, birthday, 0);
  }
  explicit ChangePwBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ChangePw> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ChangePw>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ChangePw> CreateChangePw(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> before = 0,
    ::flatbuffers::Offset<::flatbuffers::String> after = 0,
    uint32_t birthday = 0) {
  ChangePwBuilder builder_(_fbb);
  builder_.add_birthday(birthday);
  builder_.add_after(after);
  builder_.add_before(before);
  builder_.add_uid(uid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ChangePw> CreateChangePwDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    const char *before = nullptr,
    const char *after = nullptr,
    uint32_t birthday = 0) {
  auto before__ = before ? _fbb.CreateString(before) : 0;
  auto after__ = after ? _fbb.CreateString(after) : 0;
  return fb::protocol::db::request::raw::CreateChangePw(
      _fbb,
      uid,
      before__,
      after__,
      birthday);
}

inline const fb::protocol::db::request::raw::ChangePw *GetChangePw(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::request::raw::ChangePw>(buf);
}

inline const fb::protocol::db::request::raw::ChangePw *GetSizePrefixedChangePw(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::request::raw::ChangePw>(buf);
}

inline bool VerifyChangePwBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::request::raw::ChangePw>(nullptr);
}

inline bool VerifySizePrefixedChangePwBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::request::raw::ChangePw>(nullptr);
}

inline void FinishChangePwBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::raw::ChangePw> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedChangePwBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::request::raw::ChangePw> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace raw
}  // namespace request
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_FBPROTOCOLDBREQUESTCHANGEPW_FB_PROTOCOL_DB_REQUEST_RAW_H_
