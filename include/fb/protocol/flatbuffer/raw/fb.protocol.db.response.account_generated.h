// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPROTOCOLDBRESPONSEACCOUNT_FB_PROTOCOL_DB_RESPONSE_RAW_H_
#define FLATBUFFERS_GENERATED_FBPROTOCOLDBRESPONSEACCOUNT_FB_PROTOCOL_DB_RESPONSE_RAW_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace db {
namespace response {
namespace raw {

struct Account;
struct AccountBuilder;

struct Account FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AccountBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PW = 4,
    VT_MAP = 6,
    VT_SUCCESS = 8
  };
  const ::flatbuffers::String *pw() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PW);
  }
  uint32_t map() const {
    return GetField<uint32_t>(VT_MAP, 0);
  }
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PW) &&
           verifier.VerifyString(pw()) &&
           VerifyField<uint32_t>(verifier, VT_MAP, 4) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct AccountBuilder {
  typedef Account Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pw(::flatbuffers::Offset<::flatbuffers::String> pw) {
    fbb_.AddOffset(Account::VT_PW, pw);
  }
  void add_map(uint32_t map) {
    fbb_.AddElement<uint32_t>(Account::VT_MAP, map, 0);
  }
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(Account::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit AccountBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Account> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Account>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Account> CreateAccount(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> pw = 0,
    uint32_t map = 0,
    bool success = false) {
  AccountBuilder builder_(_fbb);
  builder_.add_map(map);
  builder_.add_pw(pw);
  builder_.add_success(success);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Account> CreateAccountDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *pw = nullptr,
    uint32_t map = 0,
    bool success = false) {
  auto pw__ = pw ? _fbb.CreateString(pw) : 0;
  return fb::protocol::db::response::raw::CreateAccount(
      _fbb,
      pw__,
      map,
      success);
}

inline const fb::protocol::db::response::raw::Account *GetAccount(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::response::raw::Account>(buf);
}

inline const fb::protocol::db::response::raw::Account *GetSizePrefixedAccount(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::response::raw::Account>(buf);
}

inline bool VerifyAccountBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::response::raw::Account>(nullptr);
}

inline bool VerifySizePrefixedAccountBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::response::raw::Account>(nullptr);
}

inline void FinishAccountBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::response::raw::Account> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAccountBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::response::raw::Account> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace raw
}  // namespace response
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_FBPROTOCOLDBRESPONSEACCOUNT_FB_PROTOCOL_DB_RESPONSE_RAW_H_
