// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPROTOCOLDBSPELL_FB_PROTOCOL_DB_RAW_H_
#define FLATBUFFERS_GENERATED_FBPROTOCOLDBSPELL_FB_PROTOCOL_DB_RAW_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace db {
namespace raw {

struct Spell;
struct SpellBuilder;

struct Spell FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SpellBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER = 4,
    VT_SLOT = 6,
    VT_ID = 8
  };
  uint32_t user() const {
    return GetField<uint32_t>(VT_USER, 0);
  }
  uint8_t slot() const {
    return GetField<uint8_t>(VT_SLOT, 0);
  }
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER, 4) &&
           VerifyField<uint8_t>(verifier, VT_SLOT, 1) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           verifier.EndTable();
  }
};

struct SpellBuilder {
  typedef Spell Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user(uint32_t user) {
    fbb_.AddElement<uint32_t>(Spell::VT_USER, user, 0);
  }
  void add_slot(uint8_t slot) {
    fbb_.AddElement<uint8_t>(Spell::VT_SLOT, slot, 0);
  }
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Spell::VT_ID, id, 0);
  }
  explicit SpellBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Spell> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Spell>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Spell> CreateSpell(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user = 0,
    uint8_t slot = 0,
    uint32_t id = 0) {
  SpellBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_user(user);
  builder_.add_slot(slot);
  return builder_.Finish();
}

inline const fb::protocol::db::raw::Spell *GetSpell(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::raw::Spell>(buf);
}

inline const fb::protocol::db::raw::Spell *GetSizePrefixedSpell(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::raw::Spell>(buf);
}

inline bool VerifySpellBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::raw::Spell>(nullptr);
}

inline bool VerifySizePrefixedSpellBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::raw::Spell>(nullptr);
}

inline void FinishSpellBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::raw::Spell> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSpellBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::raw::Spell> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace raw
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_FBPROTOCOLDBSPELL_FB_PROTOCOL_DB_RAW_H_
