// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPROTOCOLDBRESPONSEAUTHENTICATE_FB_PROTOCOL_DB_RESPONSE_RAW_H_
#define FLATBUFFERS_GENERATED_FBPROTOCOLDBRESPONSEAUTHENTICATE_FB_PROTOCOL_DB_RESPONSE_RAW_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace db {
namespace response {
namespace raw {

struct Authenticate;
struct AuthenticateBuilder;

struct Authenticate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AuthenticateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP = 4,
    VT_ERROR_CODE = 6
  };
  uint32_t map() const {
    return GetField<uint32_t>(VT_MAP, 0);
  }
  uint32_t error_code() const {
    return GetField<uint32_t>(VT_ERROR_CODE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MAP, 4) &&
           VerifyField<uint32_t>(verifier, VT_ERROR_CODE, 4) &&
           verifier.EndTable();
  }
};

struct AuthenticateBuilder {
  typedef Authenticate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_map(uint32_t map) {
    fbb_.AddElement<uint32_t>(Authenticate::VT_MAP, map, 0);
  }
  void add_error_code(uint32_t error_code) {
    fbb_.AddElement<uint32_t>(Authenticate::VT_ERROR_CODE, error_code, 0);
  }
  explicit AuthenticateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Authenticate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Authenticate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Authenticate> CreateAuthenticate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t map = 0,
    uint32_t error_code = 0) {
  AuthenticateBuilder builder_(_fbb);
  builder_.add_error_code(error_code);
  builder_.add_map(map);
  return builder_.Finish();
}

inline const fb::protocol::db::response::raw::Authenticate *GetAuthenticate(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::db::response::raw::Authenticate>(buf);
}

inline const fb::protocol::db::response::raw::Authenticate *GetSizePrefixedAuthenticate(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::db::response::raw::Authenticate>(buf);
}

inline bool VerifyAuthenticateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::db::response::raw::Authenticate>(nullptr);
}

inline bool VerifySizePrefixedAuthenticateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::db::response::raw::Authenticate>(nullptr);
}

inline void FinishAuthenticateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::response::raw::Authenticate> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAuthenticateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::db::response::raw::Authenticate> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace raw
}  // namespace response
}  // namespace db
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_FBPROTOCOLDBRESPONSEAUTHENTICATE_FB_PROTOCOL_DB_RESPONSE_RAW_H_
