// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPROTOCOLINTERNALTRANSFERRESULT_FB_PROTOCOL_INTERNAL_RAW_H_
#define FLATBUFFERS_GENERATED_FBPROTOCOLINTERNALTRANSFERRESULT_FB_PROTOCOL_INTERNAL_RAW_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace internal {
namespace raw {

enum TransferResult : int8_t {
  TransferResult_Success = 0,
  TransferResult_Failed = 1,
  TransferResult_LoggedIn = 2,
  TransferResult_MIN = TransferResult_Success,
  TransferResult_MAX = TransferResult_LoggedIn
};

inline const TransferResult (&EnumValuesTransferResult())[3] {
  static const TransferResult values[] = {
    TransferResult_Success,
    TransferResult_Failed,
    TransferResult_LoggedIn
  };
  return values;
}

inline const char * const *EnumNamesTransferResult() {
  static const char * const names[4] = {
    "Success",
    "Failed",
    "LoggedIn",
    nullptr
  };
  return names;
}

inline const char *EnumNameTransferResult(TransferResult e) {
  if (::flatbuffers::IsOutRange(e, TransferResult_Success, TransferResult_LoggedIn)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTransferResult()[index];
}

}  // namespace raw
}  // namespace internal
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_FBPROTOCOLINTERNALTRANSFERRESULT_FB_PROTOCOL_INTERNAL_RAW_H_
