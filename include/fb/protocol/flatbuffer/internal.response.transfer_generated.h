// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTERNALRESPONSETRANSFER_FB_PROTOCOL_FLATBUFFER_INTER_RESPONSE_H_
#define FLATBUFFERS_GENERATED_INTERNALRESPONSETRANSFER_FB_PROTOCOL_FLATBUFFER_INTER_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace protocol {
namespace flatbuffer {
namespace inter {
namespace response {

struct Transfer;
struct TransferBuilder;

enum TransferResultCode : int8_t {
  TransferResultCode_CONNECTED = 0,
  TransferResultCode_SUCCESS = 1,
  TransferResultCode_MIN = TransferResultCode_CONNECTED,
  TransferResultCode_MAX = TransferResultCode_SUCCESS
};

inline const TransferResultCode (&EnumValuesTransferResultCode())[2] {
  static const TransferResultCode values[] = {
    TransferResultCode_CONNECTED,
    TransferResultCode_SUCCESS
  };
  return values;
}

inline const char * const *EnumNamesTransferResultCode() {
  static const char * const names[3] = {
    "CONNECTED",
    "SUCCESS",
    nullptr
  };
  return names;
}

inline const char *EnumNameTransferResultCode(TransferResultCode e) {
  if (::flatbuffers::IsOutRange(e, TransferResultCode_CONNECTED, TransferResultCode_SUCCESS)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTransferResultCode()[index];
}

struct Transfer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransferBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4,
    VT_NAME = 6,
    VT_IP = 8,
    VT_PORT = 10,
    VT_MAP = 12,
    VT_X = 14,
    VT_Y = 16,
    VT_FD = 18
  };
  fb::protocol::flatbuffer::inter::response::TransferResultCode code() const {
    return static_cast<fb::protocol::flatbuffer::inter::response::TransferResultCode>(GetField<int8_t>(VT_CODE, 0));
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IP);
  }
  uint16_t port() const {
    return GetField<uint16_t>(VT_PORT, 0);
  }
  uint16_t map() const {
    return GetField<uint16_t>(VT_MAP, 0);
  }
  uint16_t x() const {
    return GetField<uint16_t>(VT_X, 0);
  }
  uint16_t y() const {
    return GetField<uint16_t>(VT_Y, 0);
  }
  uint32_t fd() const {
    return GetField<uint32_t>(VT_FD, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_CODE, 1) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyField<uint16_t>(verifier, VT_PORT, 2) &&
           VerifyField<uint16_t>(verifier, VT_MAP, 2) &&
           VerifyField<uint16_t>(verifier, VT_X, 2) &&
           VerifyField<uint16_t>(verifier, VT_Y, 2) &&
           VerifyField<uint32_t>(verifier, VT_FD, 4) &&
           verifier.EndTable();
  }
};

struct TransferBuilder {
  typedef Transfer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_code(fb::protocol::flatbuffer::inter::response::TransferResultCode code) {
    fbb_.AddElement<int8_t>(Transfer::VT_CODE, static_cast<int8_t>(code), 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Transfer::VT_NAME, name);
  }
  void add_ip(::flatbuffers::Offset<::flatbuffers::String> ip) {
    fbb_.AddOffset(Transfer::VT_IP, ip);
  }
  void add_port(uint16_t port) {
    fbb_.AddElement<uint16_t>(Transfer::VT_PORT, port, 0);
  }
  void add_map(uint16_t map) {
    fbb_.AddElement<uint16_t>(Transfer::VT_MAP, map, 0);
  }
  void add_x(uint16_t x) {
    fbb_.AddElement<uint16_t>(Transfer::VT_X, x, 0);
  }
  void add_y(uint16_t y) {
    fbb_.AddElement<uint16_t>(Transfer::VT_Y, y, 0);
  }
  void add_fd(uint32_t fd) {
    fbb_.AddElement<uint32_t>(Transfer::VT_FD, fd, 0);
  }
  explicit TransferBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Transfer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Transfer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Transfer> CreateTransfer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fb::protocol::flatbuffer::inter::response::TransferResultCode code = fb::protocol::flatbuffer::inter::response::TransferResultCode_CONNECTED,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ip = 0,
    uint16_t port = 0,
    uint16_t map = 0,
    uint16_t x = 0,
    uint16_t y = 0,
    uint32_t fd = 0) {
  TransferBuilder builder_(_fbb);
  builder_.add_fd(fd);
  builder_.add_ip(ip);
  builder_.add_name(name);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_map(map);
  builder_.add_port(port);
  builder_.add_code(code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Transfer> CreateTransferDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fb::protocol::flatbuffer::inter::response::TransferResultCode code = fb::protocol::flatbuffer::inter::response::TransferResultCode_CONNECTED,
    const char *name = nullptr,
    const char *ip = nullptr,
    uint16_t port = 0,
    uint16_t map = 0,
    uint16_t x = 0,
    uint16_t y = 0,
    uint32_t fd = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  return fb::protocol::flatbuffer::inter::response::CreateTransfer(
      _fbb,
      code,
      name__,
      ip__,
      port,
      map,
      x,
      y,
      fd);
}

inline const fb::protocol::flatbuffer::inter::response::Transfer *GetTransfer(const void *buf) {
  return ::flatbuffers::GetRoot<fb::protocol::flatbuffer::inter::response::Transfer>(buf);
}

inline const fb::protocol::flatbuffer::inter::response::Transfer *GetSizePrefixedTransfer(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::protocol::flatbuffer::inter::response::Transfer>(buf);
}

inline bool VerifyTransferBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::protocol::flatbuffer::inter::response::Transfer>(nullptr);
}

inline bool VerifySizePrefixedTransferBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::protocol::flatbuffer::inter::response::Transfer>(nullptr);
}

inline void FinishTransferBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::flatbuffer::inter::response::Transfer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTransferBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::protocol::flatbuffer::inter::response::Transfer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace response
}  // namespace inter
}  // namespace flatbuffer
}  // namespace protocol
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_INTERNALRESPONSETRANSFER_FB_PROTOCOL_FLATBUFFER_INTER_RESPONSE_H_
